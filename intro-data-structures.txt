A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

var members = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.

members.push("Mary")

c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).

function findMember(member) {
  return members.indexOf(member);
}

d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?

-1

e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?

members.splice(1, 0, "Melissa");

f) If Patrick wants to leave the line, how would you delete him from the array?

members.splice(4,1);

Provide another real-world example that you can model using a data structure.

I want to find out how my classmates in my history class voted for the 2016 presidential election. If the person voted for Donald Trump, I want to add them to the yes group. If the person did not vote for Donald Trump, I want to add them to the no group. If the person did not vote, I want to add them to the no vote group.

How would your data structure allow developers to access and manipulate the data?

a) add student to group
var yes = ["Dianna", "Victor", "Andrew"];
var no = ["Lisa", "Ben", "Donald", "Rebecca", "Christian"];
var noVote = ["Blake", "Melania"];
function vote(student) {
  if(student.votedDonaldTrump === true) {
    yes.push(student);
  } else if(student.votedDonaldTrump === false) {
      no.push(student);
  }
  else noVote.push(student);
}

b) delete student from group. Example: delete "Victor" from yes group.

    yes.splice(1,1);

c) Check the total number of students in each group

  yes.length;
  no.length;
  noVote.length;
