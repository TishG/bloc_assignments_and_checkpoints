1. What is time complexity and what is its relation to algorithms?

  Time Complexity is a function that estimates the time it takes to execute a program. It relates to algorithms because it describes the efficiency of an algorithm. The algorithms speed changes based on the input size.

2. What is runtime?

  Physical time duration of an algorithm. It is often used synonymously with time complexity.

3. How is the runtime of an algorithm calculated?

  1) Add up how many instructions the algorithm will execute as a function of the size of its input.

  2) Simplify the expression to the largest term and drop any constants.

  n is the input size and f(n) is the rate the algorithm grows as the input size grows.

4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

  Most Efficient to Least Efficient:
  1) Constant Growth O(1)
  2) Logarithmic Growth Rate O(log n)
  3) Linear Growth Rate O(n)
  4) Log-Linear Growth Rate O(n log n)
  5) Quadratic Growth Rate O(n^2) *Also considered polynomial
  *6) Polynomial Growth Rate O(n^3)
  7) Exponential Growth O(2^n)

5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

  constant growth rate example - Changing the tv channel. No matter what channel you press in, it will still take the same amount of time to switch to that channel.

6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
  FOR each number in the array
    IF number = target THEN
      RETURN true
    END IF
  END FOR
  RETURN false
END FUNCTION

  Time Complexity: O(n)

7.Determine the time complexity of the following snippet of code.

FUNCTION foo(array)
  FOR each number in the array
    FOR each number in the array
      print "Hello"
    END FOR
  END FOR
END FUNCTION

  Time Complexity: O(n^2)

8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

  Time Complexity: O(2^n)

9. Out of the code snippets you just saw, which is the most time efficient?

  O(n) or linear growth rate is the most time efficient out of the code snippets
